//------------------------------------------------------------------------------
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Xml.Linq;

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Newtonsoft.Json;
using PluginRegistrator.DataContracts;
using PluginRegistrator.DataContracts.Json.Converters;

[assembly: ProxyTypesAssembly]
namespace CrmSdk
{
    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class PluginAssembly : ValidatableEntity, IIdentity<Guid>
    {
        public PluginAssembly()
            : base(EntityLogicalName)
        {
        }

        public PluginAssembly(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "pluginassembly";

        public const int EntityTypeCode = 4605;

        [AttributeLogicalName("pluginassemblyid")]
        [JsonProperty(PropertyName = "pluginassemblyid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? PluginAssemblyId
        {
            get => GetAttributeValue<Guid?>("pluginassemblyid");
            set
            {
                SetAttributeValue("pluginassemblyid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => PluginAssemblyId = value;
        }

        [AttributeLogicalName("supportingsolutionid")]
        [JsonProperty(PropertyName = "supportingsolutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SupportingSolutionId => GetAttributeValue<Guid?>("supportingsolutionid");

        [AttributeLogicalName("pluginassemblyidunique")]
        [JsonProperty(PropertyName = "pluginassemblyidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? PluginAssemblyIdUnique => GetAttributeValue<Guid?>("pluginassemblyidunique");

        [AttributeLogicalName("solutionid")]
        [JsonProperty(PropertyName = "solutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SolutionId => GetAttributeValue<Guid?>("solutionid");

        [AttributeLogicalName("sourcetype")]
        [JsonProperty(PropertyName = "sourcetype")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue SourceType
        {
            get => GetAttributeValue<OptionSetValue>("sourcetype");
            set => SetAttributeValue("sourcetype", value);
        }

        [AttributeLogicalName("isolationmode")]
        [JsonProperty(PropertyName = "isolationmode")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue IsolationMode
        {
            get => GetAttributeValue<OptionSetValue>("isolationmode");
            set => SetAttributeValue("isolationmode", value);
        }

        [AttributeLogicalName("componentstate")]
        [JsonProperty(PropertyName = "componentstate")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ComponentState => GetAttributeValue<OptionSetValue>("componentstate");

        [AttributeLogicalName("description")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "description")]
        public string Description
        {
            get => GetAttributeValue<string>("description");
            set => SetAttributeValue("Description", "description", value);
        }

        [AttributeLogicalName("name")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("Name", "name", value);
        }

        [AttributeLogicalName("content")]
        [Range(0, 1073741823)]
        [JsonProperty(PropertyName = "content")]
        public string Content
        {
            get => GetAttributeValue<string>("content");
            set => SetAttributeValue("Content", "content", value);
        }

        [AttributeLogicalName("culture")]
        [Range(0, 32)]
        [JsonProperty(PropertyName = "culture")]
        public string Culture
        {
            get => GetAttributeValue<string>("culture");
            set => SetAttributeValue("Culture", "culture", value);
        }

        [AttributeLogicalName("publickeytoken")]
        [Range(0, 32)]
        [JsonProperty(PropertyName = "publickeytoken")]
        public string PublicKeyToken
        {
            get => GetAttributeValue<string>("publickeytoken");
            set => SetAttributeValue("PublicKeyToken", "publickeytoken", value);
        }

        [AttributeLogicalName("version")]
        [Range(0, 32)]
        [JsonProperty(PropertyName = "version")]
        public string Version
        {
            get => GetAttributeValue<string>("version");
            set => SetAttributeValue("Version", "version", value);
        }

        [AttributeLogicalName("path")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "path")]
        public string Path
        {
            get => GetAttributeValue<string>("path");
            set => SetAttributeValue("Path", "path", value);
        }

        [AttributeLogicalName("sourcehash")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "sourcehash")]
        public string SourceHash
        {
            get => GetAttributeValue<string>("sourcehash");
            set => SetAttributeValue("SourceHash", "sourcehash", value);
        }

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("major")]
        [JsonProperty(PropertyName = "major")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Major => GetAttributeValue<int?>("major");

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("minor")]
        [JsonProperty(PropertyName = "minor")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Minor => GetAttributeValue<int?>("minor");

        [AttributeLogicalName("overwritetime")]
        [JsonProperty(PropertyName = "overwritetime")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? OverwriteTime => GetAttributeValue<DateTime?>("overwritetime");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("ismanaged")]
        [JsonProperty(PropertyName = "ismanaged")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsManaged => GetAttributeValue<bool?>("ismanaged");

        /// <summary>
        /// 1:N pluginassembly_plugintype
        /// </summary>
        [RelationshipSchemaNameAttribute("pluginassembly_plugintype")]
        public IEnumerable<PluginType> pluginassembly_plugintype
        {
            get => GetRelatedEntities<PluginType>("pluginassembly_plugintype", null);
            set => SetRelatedEntities("pluginassembly_plugintype", null, value);
        }

        public static PluginAssembly FromJson(string json) => FromJson<PluginAssembly>(json);

        public static PluginAssembly FromXml(string xml) => FromXml<PluginAssembly>(xml);

        public static PluginAssembly FromXml(XObject xml) => FromXml<PluginAssembly>(xml);

        public string ToJson() => ToJson<PluginAssembly>();

        public string ToXml() => ToXml<PluginAssembly>();
    }

    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class PluginType : ValidatableEntity, IIdentity<Guid>
    {
        public PluginType()
            : base(EntityLogicalName)
        {
        }

        public PluginType(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "plugintype";

        public const int EntityTypeCode = 4602;

        [AttributeLogicalName("plugintypeid")]
        [JsonProperty(PropertyName = "plugintypeid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? PluginTypeId
        {
            get => GetAttributeValue<Guid?>("plugintypeid");
            set
            {
                SetAttributeValue("plugintypeid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => PluginTypeId = value;
        }

        [AttributeLogicalName("supportingsolutionid")]
        [JsonProperty(PropertyName = "supportingsolutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SupportingSolutionId => GetAttributeValue<Guid?>("supportingsolutionid");

        [AttributeLogicalName("solutionid")]
        [JsonProperty(PropertyName = "solutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SolutionId => GetAttributeValue<Guid?>("solutionid");

        [AttributeLogicalName("plugintypeidunique")]
        [JsonProperty(PropertyName = "plugintypeidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? PluginTypeIdUnique => GetAttributeValue<Guid?>("plugintypeidunique");

        [AttributeLogicalName("componentstate")]
        [JsonProperty(PropertyName = "componentstate")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ComponentState => GetAttributeValue<OptionSetValue>("componentstate");

        [AttributeLogicalName("description")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "description")]
        public string Description
        {
            get => GetAttributeValue<string>("description");
            set => SetAttributeValue("Description", "description", value);
        }

        [AttributeLogicalName("friendlyname")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "friendlyname")]
        public string FriendlyName
        {
            get => GetAttributeValue<string>("friendlyname");
            set => SetAttributeValue("FriendlyName", "friendlyname", value);
        }

        [AttributeLogicalName("name")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("Name", "name", value);
        }

        [AttributeLogicalName("typename")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "typename")]
        public string TypeName
        {
            get => GetAttributeValue<string>("typename");
            set => SetAttributeValue("TypeName", "typename", value);
        }

        [AttributeLogicalName("workflowactivitygroupname")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "workflowactivitygroupname")]
        public string WorkflowActivityGroupName
        {
            get => GetAttributeValue<string>("workflowactivitygroupname");
            set => SetAttributeValue("WorkflowActivityGroupName", "workflowactivitygroupname", value);
        }

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("pluginassemblyidname")]
        [JsonProperty(PropertyName = "pluginassemblyidname")]
        public string PluginAssemblyIdName => GetAttributeValue<string>("pluginassemblyidname");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("culture")]
        [JsonProperty(PropertyName = "culture")]
        public string Culture => GetAttributeValue<string>("culture");

        [AttributeLogicalName("assemblyname")]
        [JsonProperty(PropertyName = "assemblyname")]
        public string AssemblyName => GetAttributeValue<string>("assemblyname");

        [AttributeLogicalName("publickeytoken")]
        [JsonProperty(PropertyName = "publickeytoken")]
        public string PublicKeyToken => GetAttributeValue<string>("publickeytoken");

        [AttributeLogicalName("version")]
        [JsonProperty(PropertyName = "version")]
        public string Version => GetAttributeValue<string>("version");

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("customworkflowactivityinfo")]
        [JsonProperty(PropertyName = "customworkflowactivityinfo")]
        public string CustomWorkflowActivityInfo => GetAttributeValue<string>("customworkflowactivityinfo");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("pluginassemblyid")]
        [JsonProperty(PropertyName = "pluginassemblyid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "pluginassembly" })]
        public EntityReference PluginAssemblyId
        {
            get => GetAttributeValue<EntityReference>("pluginassemblyid");
            set => SetAttributeValue("pluginassemblyid", value);
        }

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("major")]
        [JsonProperty(PropertyName = "major")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Major => GetAttributeValue<int?>("major");

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("minor")]
        [JsonProperty(PropertyName = "minor")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Minor => GetAttributeValue<int?>("minor");

        [AttributeLogicalName("overwritetime")]
        [JsonProperty(PropertyName = "overwritetime")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? OverwriteTime => GetAttributeValue<DateTime?>("overwritetime");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("ismanaged")]
        [JsonProperty(PropertyName = "ismanaged")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsManaged => GetAttributeValue<bool?>("ismanaged");

        [AttributeLogicalName("isworkflowactivity")]
        [JsonProperty(PropertyName = "isworkflowactivity")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsWorkflowActivity => GetAttributeValue<bool?>("isworkflowactivity");

        public static PluginType FromJson(string json) => FromJson<PluginType>(json);

        public static PluginType FromXml(string xml) => FromXml<PluginType>(xml);

        public static PluginType FromXml(XObject xml) => FromXml<PluginType>(xml);

        public string ToJson() => ToJson<PluginType>();

        public string ToXml() => ToXml<PluginType>();
    }

    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class SdkMessage : ValidatableEntity, IIdentity<Guid>
    {
        public SdkMessage()
            : base(EntityLogicalName)
        {
        }

        public SdkMessage(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "sdkmessage";

        public const int EntityTypeCode = 4606;

        [AttributeLogicalName("sdkmessageid")]
        [JsonProperty(PropertyName = "sdkmessageid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageId
        {
            get => GetAttributeValue<Guid?>("sdkmessageid");
            set
            {
                SetAttributeValue("sdkmessageid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => SdkMessageId = value;
        }

        [AttributeLogicalName("sdkmessageidunique")]
        [JsonProperty(PropertyName = "sdkmessageidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageIdUnique => GetAttributeValue<Guid?>("sdkmessageidunique");

        [AttributeLogicalName("name")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("Name", "name", value);
        }

        [AttributeLogicalName("categoryname")]
        [Range(0, 25)]
        [JsonProperty(PropertyName = "categoryname")]
        public string CategoryName
        {
            get => GetAttributeValue<string>("categoryname");
            set => SetAttributeValue("CategoryName", "categoryname", value);
        }

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("throttlesettings")]
        [JsonProperty(PropertyName = "throttlesettings")]
        public string ThrottleSettings => GetAttributeValue<string>("throttlesettings");

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("availability")]
        [Range(-2147483648, 2147483647)]
        [JsonProperty(PropertyName = "availability")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Availability
        {
            get => GetAttributeValue<int?>("availability");
            set => SetAttributeValue("Availability", "availability", value);
        }

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("isprivate")]
        [JsonProperty(PropertyName = "isprivate")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsPrivate
        {
            get => GetAttributeValue<bool?>("isprivate");
            set => SetAttributeValue("isprivate", value);
        }

        [AttributeLogicalName("autotransact")]
        [JsonProperty(PropertyName = "autotransact")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? AutoTransact
        {
            get => GetAttributeValue<bool?>("autotransact");
            set => SetAttributeValue("autotransact", value);
        }

        [AttributeLogicalName("expand")]
        [JsonProperty(PropertyName = "expand")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? Expand
        {
            get => GetAttributeValue<bool?>("expand");
            set => SetAttributeValue("expand", value);
        }

        [AttributeLogicalName("template")]
        [JsonProperty(PropertyName = "template")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? Template
        {
            get => GetAttributeValue<bool?>("template");
            set => SetAttributeValue("template", value);
        }

        public static SdkMessage FromJson(string json) => FromJson<SdkMessage>(json);

        public static SdkMessage FromXml(string xml) => FromXml<SdkMessage>(xml);

        public static SdkMessage FromXml(XObject xml) => FromXml<SdkMessage>(xml);

        public string ToJson() => ToJson<SdkMessage>();

        public string ToXml() => ToXml<SdkMessage>();
    }

    [DataContract]
    public enum SdkMessageProcessingStepState
    {
        [EnumMember]
        On = 0,

        [EnumMember]
        Off = 1
    }

    [DataContract]
    public enum SdkMessageProcessingStepStatus
    {
        [EnumMember]
        Включено_Включено = 1,

        [EnumMember]
        Отключено_Отключено = 2
    }

    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class SdkMessageProcessingStep : ValidatableEntity, IIdentity<Guid>
    {
        public SdkMessageProcessingStep()
            : base(EntityLogicalName)
        {
        }

        public SdkMessageProcessingStep(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "sdkmessageprocessingstep";

        public const int EntityTypeCode = 4608;

        [AttributeLogicalName("sdkmessageprocessingstepid")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageProcessingStepId
        {
            get => GetAttributeValue<Guid?>("sdkmessageprocessingstepid");
            set
            {
                SetAttributeValue("sdkmessageprocessingstepid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => SdkMessageProcessingStepId = value;
        }

        [AttributeLogicalName("supportingsolutionid")]
        [JsonProperty(PropertyName = "supportingsolutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SupportingSolutionId => GetAttributeValue<Guid?>("supportingsolutionid");

        [AttributeLogicalName("solutionid")]
        [JsonProperty(PropertyName = "solutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SolutionId => GetAttributeValue<Guid?>("solutionid");

        [AttributeLogicalName("sdkmessageprocessingstepidunique")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageProcessingStepIdUnique => GetAttributeValue<Guid?>("sdkmessageprocessingstepidunique");

        [AttributeLogicalName("statecode")]
        public SdkMessageProcessingStepState? StateCode
        {
            get
            {
                var optionSet = GetAttributeValue<OptionSetValue>("statecode");
                return optionSet == null ? (SdkMessageProcessingStepState?)null : (SdkMessageProcessingStepState)Enum.ToObject(typeof(SdkMessageProcessingStepState), optionSet.Value);
            }
        }

        [AttributeLogicalName("statuscode")]
        public SdkMessageProcessingStepStatus? StatusCode
        {
            get
            {
                var optionSet = GetAttributeValue<OptionSetValue>("statuscode");
                return optionSet == null ? (SdkMessageProcessingStepStatus?)null : (SdkMessageProcessingStepStatus)Enum.ToObject(typeof(SdkMessageProcessingStepStatus), optionSet.Value);
            }
        }

        [AttributeLogicalName("invocationsource")]
        [JsonProperty(PropertyName = "invocationsource")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue InvocationSource
        {
            get => GetAttributeValue<OptionSetValue>("invocationsource");
            set => SetAttributeValue("invocationsource", value);
        }

        [AttributeLogicalName("stage")]
        [JsonProperty(PropertyName = "stage")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue Stage
        {
            get => GetAttributeValue<OptionSetValue>("stage");
            set => SetAttributeValue("stage", value);
        }

        [AttributeLogicalName("supporteddeployment")]
        [JsonProperty(PropertyName = "supporteddeployment")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue SupportedDeployment
        {
            get => GetAttributeValue<OptionSetValue>("supporteddeployment");
            set => SetAttributeValue("supporteddeployment", value);
        }

        [AttributeLogicalName("mode")]
        [JsonProperty(PropertyName = "mode")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue Mode
        {
            get => GetAttributeValue<OptionSetValue>("mode");
            set => SetAttributeValue("mode", value);
        }

        [AttributeLogicalName("componentstate")]
        [JsonProperty(PropertyName = "componentstate")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ComponentState => GetAttributeValue<OptionSetValue>("componentstate");

        [AttributeLogicalName("description")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "description")]
        public string Description
        {
            get => GetAttributeValue<string>("description");
            set => SetAttributeValue("Description", "description", value);
        }

        [AttributeLogicalName("name")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("Name", "name", value);
        }

        [AttributeLogicalName("configuration")]
        [Range(0, 1073741823)]
        [JsonProperty(PropertyName = "configuration")]
        public string Configuration
        {
            get => GetAttributeValue<string>("configuration");
            set => SetAttributeValue("Configuration", "configuration", value);
        }

        [AttributeLogicalName("filteringattributes")]
        [Range(0, 100000)]
        [JsonProperty(PropertyName = "filteringattributes")]
        public string FilteringAttributes
        {
            get => GetAttributeValue<string>("filteringattributes");
            set => SetAttributeValue("FilteringAttributes", "filteringattributes", value);
        }

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("eventhandlername")]
        [JsonProperty(PropertyName = "eventhandlername")]
        public string EventHandlerName => GetAttributeValue<string>("eventhandlername");

        [AttributeLogicalName("impersonatinguseridname")]
        [JsonProperty(PropertyName = "impersonatinguseridname")]
        public string ImpersonatingUserIdName => GetAttributeValue<string>("impersonatinguseridname");

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("sdkmessageidname")]
        [JsonProperty(PropertyName = "sdkmessageidname")]
        public string SdkMessageIdName => GetAttributeValue<string>("sdkmessageidname");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("plugintypeidname")]
        [JsonProperty(PropertyName = "plugintypeidname")]
        public string PluginTypeIdName => GetAttributeValue<string>("plugintypeidname");

        [AttributeLogicalName("eventhandler")]
        [JsonProperty(PropertyName = "eventhandler")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "plugintype" })]
        public EntityReference EventHandler
        {
            get => GetAttributeValue<EntityReference>("eventhandler");
            set => SetAttributeValue("eventhandler", value);
        }

        [AttributeLogicalName("impersonatinguserid")]
        [JsonProperty(PropertyName = "impersonatinguserid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ImpersonatingUserId
        {
            get => GetAttributeValue<EntityReference>("impersonatinguserid");
            set => SetAttributeValue("impersonatinguserid", value);
        }

        [AttributeLogicalName("sdkmessageid")]
        [JsonProperty(PropertyName = "sdkmessageid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "sdkmessage" })]
        public EntityReference SdkMessageId
        {
            get => GetAttributeValue<EntityReference>("sdkmessageid");
            set => SetAttributeValue("sdkmessageid", value);
        }

        [AttributeLogicalName("sdkmessageprocessingstepsecureconfigid")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepsecureconfigid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "sdkmessageprocessingstepsecureconfig" })]
        public EntityReference SdkMessageProcessingStepSecureConfigId
        {
            get => GetAttributeValue<EntityReference>("sdkmessageprocessingstepsecureconfigid");
            set => SetAttributeValue("sdkmessageprocessingstepsecureconfigid", value);
        }

        [AttributeLogicalName("plugintypeid")]
        [JsonProperty(PropertyName = "plugintypeid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "sdkmessagefilter" })]
        public EntityReference PluginTypeId
        {
            get => GetAttributeValue<EntityReference>("plugintypeid");
            set => SetAttributeValue("plugintypeid", value);
        }

        [AttributeLogicalName("sdkmessagefilterid")]
        [JsonProperty(PropertyName = "sdkmessagefilterid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "sdkmessagefilter" })]
        public EntityReference SdkMessageFilterId
        {
            get => GetAttributeValue<EntityReference>("sdkmessagefilterid");
            set => SetAttributeValue("sdkmessagefilterid", value);
        }

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("rank")]
        [Range(-2147483648, 2147483647)]
        [JsonProperty(PropertyName = "rank")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Rank
        {
            get => GetAttributeValue<int?>("rank");
            set => SetAttributeValue("Rank", "rank", value);
        }

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("overwritetime")]
        [JsonProperty(PropertyName = "overwritetime")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? OverwriteTime => GetAttributeValue<DateTime?>("overwritetime");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("asyncautodelete")]
        [JsonProperty(PropertyName = "asyncautodelete")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? AsyncAutoDelete
        {
            get => GetAttributeValue<bool?>("asyncautodelete");
            set => SetAttributeValue("asyncautodelete", value);
        }

        [AttributeLogicalName("ismanaged")]
        [JsonProperty(PropertyName = "ismanaged")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsManaged => GetAttributeValue<bool?>("ismanaged");

        public static SdkMessageProcessingStep FromJson(string json) => FromJson<SdkMessageProcessingStep>(json);

        public static SdkMessageProcessingStep FromXml(string xml) => FromXml<SdkMessageProcessingStep>(xml);

        public static SdkMessageProcessingStep FromXml(XObject xml) => FromXml<SdkMessageProcessingStep>(xml);

        public string ToJson() => ToJson<SdkMessageProcessingStep>();

        public string ToXml() => ToXml<SdkMessageProcessingStep>();
    }

    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class SdkMessageProcessingStepImage : ValidatableEntity, IIdentity<Guid>
    {
        public SdkMessageProcessingStepImage()
            : base(EntityLogicalName)
        {
        }

        public SdkMessageProcessingStepImage(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "sdkmessageprocessingstepimage";

        public const int EntityTypeCode = 4615;

        [AttributeLogicalName("sdkmessageprocessingstepimageid")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepimageid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageProcessingStepImageId
        {
            get => GetAttributeValue<Guid?>("sdkmessageprocessingstepimageid");
            set
            {
                SetAttributeValue("sdkmessageprocessingstepimageid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => SdkMessageProcessingStepImageId = value;
        }

        [AttributeLogicalName("supportingsolutionid")]
        [JsonProperty(PropertyName = "supportingsolutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SupportingSolutionId => GetAttributeValue<Guid?>("supportingsolutionid");

        [AttributeLogicalName("solutionid")]
        [JsonProperty(PropertyName = "solutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SolutionId => GetAttributeValue<Guid?>("solutionid");

        [AttributeLogicalName("sdkmessageprocessingstepimageidunique")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepimageidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageProcessingStepImageIdUnique => GetAttributeValue<Guid?>("sdkmessageprocessingstepimageidunique");

        [AttributeLogicalName("imagetype")]
        [JsonProperty(PropertyName = "imagetype")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ImageType
        {
            get => GetAttributeValue<OptionSetValue>("imagetype");
            set => SetAttributeValue("imagetype", value);
        }

        [AttributeLogicalName("componentstate")]
        [JsonProperty(PropertyName = "componentstate")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ComponentState => GetAttributeValue<OptionSetValue>("componentstate");

        [AttributeLogicalName("description")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "description")]
        public string Description
        {
            get => GetAttributeValue<string>("description");
            set => SetAttributeValue("Description", "description", value);
        }

        [AttributeLogicalName("name")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("Name", "name", value);
        }

        [AttributeLogicalName("relatedattributename")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "relatedattributename")]
        public string RelatedAttributeName
        {
            get => GetAttributeValue<string>("relatedattributename");
            set => SetAttributeValue("RelatedAttributeName", "relatedattributename", value);
        }

        [AttributeLogicalName("entityalias")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "entityalias")]
        public string EntityAlias
        {
            get => GetAttributeValue<string>("entityalias");
            set => SetAttributeValue("EntityAlias", "entityalias", value);
        }

        [AttributeLogicalName("messagepropertyname")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "messagepropertyname")]
        public string MessagePropertyName
        {
            get => GetAttributeValue<string>("messagepropertyname");
            set => SetAttributeValue("MessagePropertyName", "messagepropertyname", value);
        }

        [AttributeLogicalName("attributes")]
        [Range(0, 100000)]
        [JsonProperty(PropertyName = "attributes")]
        public new string Attributes
        {
            get => GetAttributeValue<string>("attributes");
            set => SetAttributeValue("Attributes", "attributes", value);
        }

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("sdkmessageprocessingstepid")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "sdkmessageprocessingstep" })]
        public EntityReference SdkMessageProcessingStepId
        {
            get => GetAttributeValue<EntityReference>("sdkmessageprocessingstepid");
            set => SetAttributeValue("sdkmessageprocessingstepid", value);
        }

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("overwritetime")]
        [JsonProperty(PropertyName = "overwritetime")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? OverwriteTime => GetAttributeValue<DateTime?>("overwritetime");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("ismanaged")]
        [JsonProperty(PropertyName = "ismanaged")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsManaged => GetAttributeValue<bool?>("ismanaged");

        public static SdkMessageProcessingStepImage FromJson(string json) => FromJson<SdkMessageProcessingStepImage>(json);

        public static SdkMessageProcessingStepImage FromXml(string xml) => FromXml<SdkMessageProcessingStepImage>(xml);

        public static SdkMessageProcessingStepImage FromXml(XObject xml) => FromXml<SdkMessageProcessingStepImage>(xml);

        public string ToJson() => ToJson<SdkMessageProcessingStepImage>();

        public string ToXml() => ToXml<SdkMessageProcessingStepImage>();
    }

    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class SdkMessageProcessingStepSecureConfig : ValidatableEntity, IIdentity<Guid>
    {
        public SdkMessageProcessingStepSecureConfig()
            : base(EntityLogicalName)
        {
        }

        public SdkMessageProcessingStepSecureConfig(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "sdkmessageprocessingstepsecureconfig";

        public const int EntityTypeCode = 4616;

        [AttributeLogicalName("sdkmessageprocessingstepsecureconfigid")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepsecureconfigid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageProcessingStepSecureConfigId
        {
            get => GetAttributeValue<Guid?>("sdkmessageprocessingstepsecureconfigid");
            set
            {
                SetAttributeValue("sdkmessageprocessingstepsecureconfigid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => SdkMessageProcessingStepSecureConfigId = value;
        }

        [AttributeLogicalName("sdkmessageprocessingstepsecureconfigidunique")]
        [JsonProperty(PropertyName = "sdkmessageprocessingstepsecureconfigidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageProcessingStepSecureConfigIdUnique => GetAttributeValue<Guid?>("sdkmessageprocessingstepsecureconfigidunique");

        [AttributeLogicalName("secureconfig")]
        [Range(0, 1073741823)]
        [JsonProperty(PropertyName = "secureconfig")]
        public string SecureConfig
        {
            get => GetAttributeValue<string>("secureconfig");
            set => SetAttributeValue("SecureConfig", "secureconfig", value);
        }

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        public static SdkMessageProcessingStepSecureConfig FromJson(string json) => FromJson<SdkMessageProcessingStepSecureConfig>(json);

        public static SdkMessageProcessingStepSecureConfig FromXml(string xml) => FromXml<SdkMessageProcessingStepSecureConfig>(xml);

        public static SdkMessageProcessingStepSecureConfig FromXml(XObject xml) => FromXml<SdkMessageProcessingStepSecureConfig>(xml);

        public string ToJson() => ToJson<SdkMessageProcessingStepSecureConfig>();

        public string ToXml() => ToXml<SdkMessageProcessingStepSecureConfig>();
    }

    [DataContract]
    [EntityLogicalName(EntityLogicalName)]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class ServiceEndpoint : ValidatableEntity, IIdentity<Guid>
    {
        public ServiceEndpoint()
            : base(EntityLogicalName)
        {
        }

        public ServiceEndpoint(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "serviceendpoint";

        public const int EntityTypeCode = 4618;

        [AttributeLogicalName("serviceendpointid")]
        [JsonProperty(PropertyName = "serviceendpointid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? ServiceEndpointId
        {
            get => GetAttributeValue<Guid?>("serviceendpointid");
            set
            {
                SetAttributeValue("serviceendpointid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => ServiceEndpointId = value;
        }

        [AttributeLogicalName("supportingsolutionid")]
        [JsonProperty(PropertyName = "supportingsolutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SupportingSolutionId => GetAttributeValue<Guid?>("supportingsolutionid");

        [AttributeLogicalName("solutionid")]
        [JsonProperty(PropertyName = "solutionid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SolutionId => GetAttributeValue<Guid?>("solutionid");

        [AttributeLogicalName("serviceendpointidunique")]
        [JsonProperty(PropertyName = "serviceendpointidunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? ServiceEndpointIdUnique => GetAttributeValue<Guid?>("serviceendpointidunique");

        [AttributeLogicalName("userclaim")]
        [JsonProperty(PropertyName = "userclaim")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue UserClaim
        {
            get => GetAttributeValue<OptionSetValue>("userclaim");
            set => SetAttributeValue("userclaim", value);
        }

        [AttributeLogicalName("contract")]
        [JsonProperty(PropertyName = "contract")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue Contract
        {
            get => GetAttributeValue<OptionSetValue>("contract");
            set => SetAttributeValue("contract", value);
        }

        [AttributeLogicalName("connectionmode")]
        [JsonProperty(PropertyName = "connectionmode")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ConnectionMode
        {
            get => GetAttributeValue<OptionSetValue>("connectionmode");
            set => SetAttributeValue("connectionmode", value);
        }

        [AttributeLogicalName("componentstate")]
        [JsonProperty(PropertyName = "componentstate")]
        [JsonConverter(typeof(OptionSetValueConverter))]
        public OptionSetValue ComponentState => GetAttributeValue<OptionSetValue>("componentstate");

        [AttributeLogicalName("description")]
        [Range(0, 2000)]
        [JsonProperty(PropertyName = "description")]
        public string Description
        {
            get => GetAttributeValue<string>("description");
            set => SetAttributeValue("Description", "description", value);
        }

        [AttributeLogicalName("solutionnamespace")]
        [Range(0, 160)]
        [JsonProperty(PropertyName = "solutionnamespace")]
        public string SolutionNamespace
        {
            get => GetAttributeValue<string>("solutionnamespace");
            set => SetAttributeValue("SolutionNamespace", "solutionnamespace", value);
        }

        [AttributeLogicalName("name")]
        [Range(0, 256)]
        [JsonProperty(PropertyName = "name")]
        public string Name
        {
            get => GetAttributeValue<string>("name");
            set => SetAttributeValue("Name", "name", value);
        }

        [AttributeLogicalName("path")]
        [Range(0, 160)]
        [JsonProperty(PropertyName = "path")]
        public string Path
        {
            get => GetAttributeValue<string>("path");
            set => SetAttributeValue("Path", "path", value);
        }

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("overwritetime")]
        [JsonProperty(PropertyName = "overwritetime")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? OverwriteTime => GetAttributeValue<DateTime?>("overwritetime");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("ismanaged")]
        [JsonProperty(PropertyName = "ismanaged")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsManaged => GetAttributeValue<bool?>("ismanaged");

        public static ServiceEndpoint FromJson(string json) => FromJson<ServiceEndpoint>(json);

        public static ServiceEndpoint FromXml(string xml) => FromXml<ServiceEndpoint>(xml);

        public static ServiceEndpoint FromXml(XObject xml) => FromXml<ServiceEndpoint>(xml);

        public string ToJson() => ToJson<ServiceEndpoint>();

        public string ToXml() => ToXml<ServiceEndpoint>();
    }

    [DataContract]
    [EntityLogicalName("sdkmessagefilter")]
    [GeneratedCode("pkGenUtil", "0.0")]
    public partial class SdkMessageFilter : ValidatableEntity, IIdentity<Guid>
    {
        public SdkMessageFilter()
            : base(EntityLogicalName)
        {
        }

        public SdkMessageFilter(bool immediateValidation)
            : base(EntityLogicalName, immediateValidation)
        {
        }

        public const string EntityLogicalName = "sdkmessagefilter";

        public const int EntityTypeCode = 4607;

        [AttributeLogicalName("sdkmessagefilterid")]
        [JsonProperty(PropertyName = "sdkmessagefilterid")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageFilterId
        {
            get => GetAttributeValue<Guid?>("sdkmessagefilterid");
            set
            {
                SetAttributeValue("sdkmessagefilterid", value);
                base.Id = value ?? Guid.Empty;
            }
        }

        [JsonProperty(PropertyName = "Id")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public override Guid Id
        {
            get => base.Id;
            set => SdkMessageFilterId = value;
        }

        [AttributeLogicalName("sdkmessagefilteridunique")]
        [JsonProperty(PropertyName = "sdkmessagefilteridunique")]
        [JsonConverter(typeof(StructConverter<Guid>))]
        public Guid? SdkMessageFilterIdUnique => GetAttributeValue<Guid?>("sdkmessagefilteridunique");

        [AttributeLogicalName("primaryobjecttypecode")]
        [JsonProperty(PropertyName = "primaryobjecttypecode")]
        public string PrimaryEntityLogicalName => GetAttributeValue<string>("primaryobjecttypecode");

        [AttributeLogicalName("secondaryobjecttypecode")]
        [JsonProperty(PropertyName = "secondaryobjecttypecode")]
        public string SecondaryEntityLogicalName => GetAttributeValue<string>("secondaryobjecttypecode");

        [AttributeLogicalName("createdonbehalfbyyominame")]
        [JsonProperty(PropertyName = "createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName => GetAttributeValue<string>("createdonbehalfbyyominame");

        [AttributeLogicalName("modifiedbyname")]
        [JsonProperty(PropertyName = "modifiedbyname")]
        public string ModifiedByName => GetAttributeValue<string>("modifiedbyname");

        [AttributeLogicalName("sdkmessageidname")]
        [JsonProperty(PropertyName = "sdkmessageidname")]
        public string SdkMessageIdName => GetAttributeValue<string>("sdkmessageidname");

        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName => GetAttributeValue<string>("modifiedonbehalfbyyominame");

        [AttributeLogicalName("createdbyname")]
        [JsonProperty(PropertyName = "createdbyname")]
        public string CreatedByName => GetAttributeValue<string>("createdbyname");

        [AttributeLogicalName("modifiedonbehalfbyname")]
        [JsonProperty(PropertyName = "modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName => GetAttributeValue<string>("modifiedonbehalfbyname");

        [AttributeLogicalName("createdonbehalfbyname")]
        [JsonProperty(PropertyName = "createdonbehalfbyname")]
        public string CreatedOnBehalfByName => GetAttributeValue<string>("createdonbehalfbyname");

        [AttributeLogicalName("sdkmessageid")]
        [JsonProperty(PropertyName = "sdkmessageid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "sdkmessage" })]
        public EntityReference SdkMessageId
        {
            get => GetAttributeValue<EntityReference>("sdkmessageid");
            set => SetAttributeValue("sdkmessageid", value);
        }

        [AttributeLogicalName("modifiedonbehalfby")]
        [JsonProperty(PropertyName = "modifiedonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedOnBehalfBy => GetAttributeValue<EntityReference>("modifiedonbehalfby");

        [AttributeLogicalName("createdonbehalfby")]
        [JsonProperty(PropertyName = "createdonbehalfby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedOnBehalfBy => GetAttributeValue<EntityReference>("createdonbehalfby");

        [AttributeLogicalName("organizationid")]
        [JsonProperty(PropertyName = "organizationid")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "organization" })]
        public EntityReference OrganizationId => GetAttributeValue<EntityReference>("organizationid");

        [AttributeLogicalName("modifiedby")]
        [JsonProperty(PropertyName = "modifiedby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference ModifiedBy => GetAttributeValue<EntityReference>("modifiedby");

        [AttributeLogicalName("createdby")]
        [JsonProperty(PropertyName = "createdby")]
        [JsonConverter(typeof(EntityReferenceConverter), new object[] { "systemuser" })]
        public EntityReference CreatedBy => GetAttributeValue<EntityReference>("createdby");

        [AttributeLogicalName("availability")]
        [Range(-2147483648, 2147483647)]
        [JsonProperty(PropertyName = "availability")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? Availability
        {
            get => GetAttributeValue<int?>("availability");
            set => SetAttributeValue("Availability", "availability", value);
        }

        [AttributeLogicalName("customizationlevel")]
        [JsonProperty(PropertyName = "customizationlevel")]
        [JsonConverter(typeof(StructConverter<int>))]
        public int? CustomizationLevel => GetAttributeValue<int?>("customizationlevel");

        [AttributeLogicalName("modifiedon")]
        [JsonProperty(PropertyName = "modifiedon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? ModifiedOn => GetAttributeValue<DateTime?>("modifiedon");

        [AttributeLogicalName("createdon")]
        [JsonProperty(PropertyName = "createdon")]
        [JsonConverter(typeof(StructConverter<DateTime>))]
        public DateTime? CreatedOn => GetAttributeValue<DateTime?>("createdon");

        [AttributeLogicalName("iscustomprocessingstepallowed")]
        [JsonProperty(PropertyName = "iscustomprocessingstepallowed")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsCustomProcessingStepAllowed
        {
            get => GetAttributeValue<bool?>("iscustomprocessingstepallowed");
            set => SetAttributeValue("iscustomprocessingstepallowed", value);
        }

        [AttributeLogicalName("isvisible")]
        [JsonProperty(PropertyName = "isvisible")]
        [JsonConverter(typeof(StructConverter<bool>))]
        public bool? IsVisible => GetAttributeValue<bool?>("isvisible");

        public static SdkMessageFilter FromJson(string json) => FromJson<SdkMessageFilter>(json);

        public static SdkMessageFilter FromXml(string xml) => FromXml<SdkMessageFilter>(xml);

        public static SdkMessageFilter FromXml(XObject xml) => FromXml<SdkMessageFilter>(xml);

        public string ToJson() => ToJson<SdkMessageFilter>();

        public string ToXml() => ToXml<SdkMessageFilter>();
    }
}
